#!/usr/bin/env python

import argparse
import math
import random
import datetime
import functools


def get_words(word_file, min_length, max_length):
    """Returns a set of usable words from the given file"""
    words = open(word_file)
    words = {word.strip().lower() for word in words}
    words = {word for word in words if word.isalpha()}
    words = {word for word in words if len(word) >= min_length}
    words = {word for word in words if len(word) <= max_length}
    return words


def get_passwords(sites_file, generator):
    """Returns a dict of passwords from the given sites"""
    sites = [site.strip() for site in open(sites_file)]
    return {site: generator(site) for site in sites}


def print_stats(words, phrase_length):
    """Prints the rough amount of entropy and time to guess a passphrass"""
    entropy = math.log(len(words), 2) * phrase_length
    time = format_time(2 ** entropy / 1000)
    print '~{} bits of entropy'.format(int(round(entropy)))
    print '~{} at 1000 guesses/sec'.format(time)


def format_time(seconds):
    """Formats a seconds into a rough time estimate"""
    delta = datetime.timedelta(seconds=seconds)
    if delta.days >= 365:
        time, unit = delta.days / 365, 'year'
    elif delta.days >= 7:
        time, unit = delta.days / 7, 'week'
    elif delta.days > 0:
        time, unit = delta.days, 'day'
    elif delta.seconds >= 3600:
        time, unit = delta.seconds / 3600, 'hour'
    elif delta.seconds >= 60:
        time, unit = delta.seconds / 60, 'minute'
    else:
        time, unit = delta.seconds, 'second'

    time = int(round(time))
    if time != 1:
        unit += 's'

    return '{} {}'.format(time, unit)


def gen_pass(words, phrase_length):
    """Generates a passphrase from a set of words"""
    return ''.join(random.sample(words, phrase_length))


def gen_pass_constrained(generator, site):
    if '#' not in site:
        return generator()
    else:
        site, max_size = site.split('#')
        postfix = site[0].upper() + str(len(site))
        phrase_size = int(max_size) - len(postfix)
        return generator()[:phrase_size] + postfix


def make_generator(words, phrase_length):
    """Creates a passphrase generator function"""
    return functools.partial(gen_pass, words, phrase_length)


def make_constrained_generator(generator):
    """Creates a constrained generator function from an unconstrained one"""
    return functools.partial(gen_pass_constrained, generator)


def get_args():
    """Gets the command line arguments for genpass"""
    parser = argparse.ArgumentParser()
    parser.add_argument('--phrase-length', '-p', type=int, default=4,
                        help='Number of words in the passphrases')
    parser.add_argument('--min-word-length', '-w', type=int, default=3,
                        help='Minimum length of words in the passphrases')
    parser.add_argument('--max-word-length', '-W', type=int, default=6,
                        help='Maximum length of words in the passphrases')
    parser.add_argument('--word-file', type=str, default='words.txt',
                        help='List of words to use in the passphrases')
    parser.add_argument('--entropy', '-e', action='store_true', default=False,
                        help='Print entropy statistics')
    parser.add_argument('sites', nargs='?', type=str, default=None,
                        help='List of passwords to generate')
    parser.add_argument('seed', nargs='?', type=int, default=None,
                        help='Seed for the random number generator')
    return parser.parse_args()


def main():
    """Runs the passphrase generator"""
    args = get_args()
    words = get_words(args.word_file,
                      args.min_word_length,
                      args.max_word_length)
    if args.seed:
        random.seed(args.seed)

    if args.entropy:
        print_stats(words, args.phrase_length)

    generator = make_generator(words, args.phrase_length)

    if args.sites:
        generator = make_constrained_generator(generator)
        passwords = get_passwords(args.sites, generator)
        for site, password in passwords.iteritems():
            print '{}: {}'.format(site.split('#')[0], password)
    else:
        print generator()


if __name__ == '__main__':
    main()
