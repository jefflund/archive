Jeffrey Lund

1. What problem did the authors try to solve?

The authors are trying to reduce the number of unanswered questions on Yahoo!
questions by leveraging past answers to similar questions.

2. Why is the problem significant to solve in the first place?

The preliminary analysis using cosine similarity indicate that 25% of questions
are recurrent, meaning that those questions could be answered using previous
answers. By automatically leveraging those questions, the number of unanswered
questions could be lowered from 15%, thereby helping a large number of QA
users.

3. What is the methodology the authors have adopted in solving the problem?

The authors adopt a two-stage approach to find previous answers to answer new
questions. The first stage selects candidate questions using cosine similarity
with a vector-space unigram model with TF-IDF weights. The second stage used a
random forest classifier to select potential answers from the candidate
questions.

4. Is the performance evaluation of the proposed solution technically sound
and complete? Explain why.

I liked the evaluation they used. I do wish they had focused on more than just
three top-level categories, and instead covered a broader selection of Yahoo!
Answers so we could better see the generalization of this method, but I
understand that this would increase the cost on MTurk to validate the
question/answer pairs generated by the system. I also wish they had some sort
of baseline so I could determine how good this system actually is.

The test on the live system with robots using this system was not as
compelling. Yes, overall they got good scores, but in the end by posing as a
real user they aren't subject to the amount of trust an automated system
normally would require simply because real users on Yahoo! Answer overall are
pretty much a crapshoot. If this system were deployed as something other than a
fake user, then I think user trust would be a significant issue.

5. Do you have any questions regarding the paper? If so, list them.

In figure 6, the Recall-precision curve is given. It seems to me that for users
to trust this system, precision is of utmost importance. Even at recall levels
of ~.1 or so, the precision is about .8-.9 at best. Is this good enough for the
system to be trusted?
